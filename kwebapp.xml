<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>BCHS//openradtool: rapid application development</title>
		<link href="https://fonts.googleapis.com/css?family=Alegreya+Sans:400,400italic,500" rel="stylesheet" />
		<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
		<link href="style.css" rel="stylesheet" />
		<link href="kwebapp.css" rel="stylesheet" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="manifest" href="/manifest.json" />
		<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
		<meta property="og:title" content="BCHS and openradtool: rapid application development" />
		<meta property="og:image" content="logo-blue.png" />
		<meta property="og:url" content="https://learnbchs.org/kwebapp.html" />
		<meta property="og:type" content="website" />
		<meta property="og:description" content="Introduction to using openradtool in your BCHS stack." />
		<meta name="description" content="Introduction got using openradtool in your BCHS stack." />
	</head>
	<body>
		<section itemscope="itemscope" itemtype="http://schema.org/WebPage">
			<nav class="subnav">
				openradtool series:
				<a href="kwebapp.html">introduction</a>, 
				<a href="rbac.html">RBAC</a>,
				<a href="auditing.html">role audits</a>,
				<a href="translate.html">translation</a>,
				<a href="typescript.html">TypeScript</a>
			</nav>
			<header>
				<img itemprop="image" src="logo-blue.png" alt="BCHS Logo" />
				<h1>
					<a href="index.html" itemprop="name">BCHS</a>
				</h1>
				<nav>
					<a href="tools.html"><span>tools</span></a>
					<a href="easy.html"><span>example</span></a>
					<a href="https://github.com/kristapsdz/bchs"><i class="fa fa-github"></i></a>
				</nav>
			</header>
			<article>
				<header>
					<p class="intro">
						One of the most rewarding parts of back-end web application development is re-writing the same
						database routines and same JSON export routines over and over.
						Then changing the requirements and starting over.
						It's what makes web application developers such well-balanced folks, right?
					</p>
					<p>
						Unfortunately, in the flux of user requirements&#8212;each addition or modification of
						a table column changing select routines, insertions, validation, exporting, regression tests,
						and even (especially?) front-end JavaScript&#8212;we make mistakes.
						What <a href="index.html">BCHS</a> tools beyond the <a href="tools.html">usual</a> can help in
						this perennial test of our patience?
					</p>
					<h2>
						<span>ort(1)</span>
					</h2>
				</header>
				<section>
					<p>
						I wrote <a href="https://kristaps.bsd.lv/openradtool">openradtool</a> after the <del>tenth</del>
						hundredth time I started a new <a href="index.html">BCHS</a> web application roughly as follows:
					</p>
					<ol>
						<li>
							design an initial table schema (<q>data layout</q>) from a specification;
						</li>
						<li>
							pull down <a href="https://github.com/kristapsdz/kcgi-framework">kcgi-framework</a> as a
							starting point;
						</li>
						<li>
							create a set of C structures mirroring the data layout (e.g., kcgi-framework's <a
								href="https://github.com/kristapsdz/kcgi-framework/blob/master/extern.h">extern.h</a>);
						</li>
						<li>
							grind on <code>INSERT</code>, <code>UPDATE</code>, <code>SELECT</code> and
							<code>DELETE</code> routines using the same tired way of chaining together column
							schemas with <q>fill</q> and <q>unfill</q> routines (e.g., <a
								href="https://github.com/kristapsdz/kcgi-framework/blob/master/db.c">db.c</a>)
							connected to the C API; 
						</li>
						<li>
							construct the application logic (e.g., <a
								href="https://github.com/kristapsdz/kcgi-framework/blob/master/main.c">main.c</a>
							connecting these components and driving my application; and finally
						</li>
						<li>
							make typo mistakes in SQL, have inconsistent documentation between the SQL and C API,
							forget parameters, incorrectly validate, and so on&#8212;problems that only arise in
							actually testing the individual parts or having a colleague scratch her head over
							mismatches.
						</li>
					</ol>
					<p>
						All of this takes time, which is something in high demand; and my colleagues' patience, which is
						even more scarce.
						In case we forget where the <em>real</em> work's at, what happens in the commonplace event that
						our specification changes during the review phase?
					</p>
					<figure>
						<img src="kwebapp-fig1.svg" alt="" />
						<figure>
							The circle of <del>life</del> work.
						</figure>
					</figure>
					<ol>
						<li>
							Add an additional column to (or modify an existing column of) a database table;
						</li>
						<li>
							create an additional SQL <q>upgrade</q> script between the last version and the current
							version (of course, you're using <a href="https://man.openbsd.org/cvs">cvs(1)</a>'s
							tagging facility or other VCS to track your production and development releases);
						</li>
						<li>
							update the C structures, column definitions, fill and unfill routines (naturally,
							forgetting to update the documentation);
						</li>
						<li>
							change the <q>business logic</q> accepting the new field, validating it, and passing it
							back into the database backend and JSON export; then
						</li>
						<li>
							change the front-end code (JavaScript, HTML5) to include the new value.
						</li>
					</ol>
					<p>
						Folks programming in Java or Python have all sorts of fancy tools and frameworks to help them
						suck data out and send it to the client.
						(I guess.)
						When I'm writing in C, I don't.
						<a href="https://kristaps.bsd.lv/openradtool">openradtool</a> was a way to automate a lot of the steps
						above into a single one when using my tools: <a href="https://kristaps.bsd.lv/kcgi">kcgi</a>, <a
							href="https://kristaps.bsd.lv/ksql">ksql</a> (that is, <a
							href="https://sqlite.org">SQLite</a>), and of course <a
							href="https://www.openbsd.org">OpenBSD</a>.
					</p>
					<p>
						Read this and see if it makes sense:
					</p>
					<article data-sblg-article="1" data-sblg-permlink="0"></article>
					<p>
						Hopefully it does.
						We have two objects: a <code>user</code> and a user's <code>session</code>.
						As C programmers, you're interpreting them as <code>struct</code>s;
						or if you're more SQL-minded, as tables.
						Both are correct.
						Moreover, the snippet defines not only the relationship between two objects as might envision in
						an SQL database, but also limitations on input data (the <code>limit</code> clause) and
						documentation (the <code>comment</code> clause).
						It also specifies some terms to search on, e.g., <code>email</code> and <code>hash</code> for
						users&#8212;passwords are automatically hashed using the 
						<a href="https://man.openbsd.org/crypt_checkpass">crypt_checkpass(3)</a> family.
					</p>
					<p>
						When run through <a href="https://kristaps.bsd.lv/openradtool">openradtool</a>, it automates the
						production of many of the elements in our above graph:
					</p>
					<ul>
						<li>
							SQL: the <a href="kwebapp.db.sql.html">SQL schema</a> required by the data definitions;
						</li>
						<li>
							C API: not only the <a href="kwebapp.db.h.html">header</a> (structures, functions), but
							the full <a href="kwebapp.db.c.html">implementation</a> acting upon the SQL definitions;
						</li>
						<li>
							REST API: a set of functions for exporting the C API into JSON (included in the C API <a
								href="kwebapp.db.h.html">header</a> and <a
								href="kwebapp.db.c.html">implementation</a>); and
						</li>
						<li>
							JavaScript: a <a href="kwebapp.db.js.html">set of objects</a> for filling in DOM trees
							with the defined data.
						</li>
					</ul>
					<figure>
						<img src="kwebapp-fig2.svg" alt="" />
						<figure>
							The simplified process.
						</figure>
					</figure>
					<p>
						The SQL is managed by <a href="https://kristaps.bsd.lv/openradtool">openradtool</a>&#8212;not just
						generatively, but within the update cycle.
						It's able to generate the <a href="kwebapp.db.sqldiff.html">difference</a> between
						configurations (in this example, one without the foreign key on the session)&#8212;allowing you
						to see how your database has changed between versions.
						This is particularly useful when rolling out incremental releases.
						(Of course, not all data layout changes can be realised with SQLite's SQL!)
					</p>
					<p>
						You'll still need to update your front-end logic, of course, to reflect your new data.
						And your application logic&#8212;obviously.
						But the rest of the tedious cycle&#8212;C API, validators, JSON exporters, etc.&#8212;are all
						handled by <a href="https://kristaps.bsd.lv/openradtool">openradtool</a>.
					</p>
					<p>
						For an example of how a backend might look, consider <a href="kwebapp.main.c.html">main.c</a>.
						This handles logging in, logging out, and a simple homepage using the given example.
						Take, for example, the component where it processes a request's cookies using the <span
							class="nm">openradtool</span> functions for reading from the database:
					</p>
					<article data-sblg-article="1" data-sblg-permlink="0"></article>
					<p>
						Upon login, it uses the <span class="nm">openradtool</span>-generated output functions to emit JSON:
					</p>
					<article data-sblg-article="1" data-sblg-permlink="0"></article>
					<p>
						All of the <a href="https://kristaps.bsd.lv/kcgi">kcgi(3)</a> functions are fully documented,
						and the generated functions are also documented in <a href="kwebapp.db.h.html">kwebapp.db.h</a>.
						Much easier!
					</p>
					<h3>
						where is openradtool going
					</h3>
					<p>
						Short answer: wherever we want.
						Longer answer? Most of my immediate intentions are in the <a
							href="https://github.com/kristapsdz/openradtool/blob/master/TODO.md">TODO</a>.
					</p>
					<p>
						What will I not do myself in the near-term?
						Expand to other databases, namely <a
							href="https://www.postgresql.org/">PostgreSQL</a>&#8212;though that's really a job for
						<a href="https://kristaps.bsd.lv/ksql">ksql</a>.
						(I think <a href="https://kristaps.bsd.lv/ksql">ksql</a> is due for some care on having a
						privilege-separated model of operation for easier <a href="https://man.openbsd.org/pledge.2">pledging</a>.)
						I'd also like it to document the JSON export, for example, with <a
							href="http://json-schema.org/">JSON Schema</a>.
					</p>
					<p>
						Meanwhile, if you're using <a href="https://kristaps.bsd.lv/openradtool">openradtool</a> for any
						projects, keep me in the loop!  
					</p>
				</section>
			</article>
			<footer>
				<div>
					<a href="https://creativecommons.org/licenses/by/4.0/"><i class="fa fa-creative-commons"></i></a> 
					<a rel="author" href="https://kristaps.bsd.lv">Kristaps Dzonsons</a>
				</div>
			</footer>
		</section>
	</body>
</html>

